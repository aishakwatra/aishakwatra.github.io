[

  
  {
    "id": "hell-for-leather",
    "href": "project-template.html?id=hell-for-leather",
    "imgSrc": "assets/hell for leather 1.png",
    "imgAlt": "Hell For Leather",
    "title": "Hell For Leather",
    "year": "2024",
    "description": "OpenGL Racing Game with a Physically Based Rendering (PBR) pipeline, custom vehicle physics, and optimized real-time collision and suspension dynamics.",
    "longDescription": "This 3D racing simulation was a third-year OpenGL project focused on implementing advanced graphics and physics systems from the ground up. The project features a complete Physically Based Rendering (PBR) pipeline for realistic, physically-grounded materials and lighting, all set within a 3D skybox. A core technical component is the optimized collision engine, which uses a spatial grid to accelerate queries. This allows for real-time suspension physics (via ray-triangle intersection queries) and accurate track collisions (via AABB checks). The demo is complete with vehicle physics, a flexible follow-cam, 3D model loading via Assimp, and a full UI with a lap timer.",
    "tags": ["OpenGL", "C++", "PBR"],
    "dateCompleted": "2024",
    "projectType": "Pair Project",
    "githubURL": "https://github.com/aishakwatra/racingsimulation",
    "gameURL": "https://matt-pongsagon.itch.io/hell-for-leather-opengl-ddct",
    "features": [
      { "name": "Physically Based Rendering (PBR) for realistic lighting and materials on the car and track.", "isMine": true },
      { "name": "Optimized Collision Detection: Employs a spatial grid to accelerate all collision queries. This structure enables fast ray-triangle intersection queries (with all four wheels) and AABB-triangle checks (for side impacts against the track's geometry).", "isMine": true },
      { "name": "Flexible Camera Controller: Features a dynamic follow-cam that tracks the car, pulling back at high speeds and shifting during turns. The system also allows the user to take manual control and orbit the camera.", "isMine": false },
      { "name": "Sound Management: A central sound system manages all game audio, like engine sounds and effects.", "isMine": true },
      { "name": "UI & Text: Renders text on-screen for the HUD, including a lap timer, best lap display, and a car selection menu.", "isMine": true },
      { "name": "Vehicle Physics: Includes handling for acceleration, braking, steering and jumping to make the driving feel more believable.", "isMine": false },
      { "name": "Lap Timer: Uses a 3D trigger volume at the finish line to accurately track lap times and save the best-lap record.", "isMine": true },
      { "name": "3D Environment: Skybox to create the 3D sky and background.", "isMine": false }
    ],
    "myFeatures": [],
    "media": {
      "videoURL": "https://www.youtube.com/embed/QgssG5bXjFo?si=9eT8u6Q6Fw-Kn3UR",
      "images": [
        "assets/hell for leather 1.png",
        "assets/hell for leather 2.png",
        "assets/hell for leather 3.png"
      ]
    }
  },
  {
    "id": "cuda-raytrace",
    "href": "project-template.html?id=cuda-raytrace",
    "imgSrc": "assets/cuda1.png",
    "imgAlt": "Real time Ray Tracing with CUDA",
    "title": "Real time Ray Tracing with CUDA",
    "year": "2024",
    "description": "An extension of a professor-provided real-time CUDA ray tracing engine. The project implements ray tracing for triangles, procedurally generated object textures, interactive camera movements, and dynamic collision detection in real-time.",
    "longDescription": "This project is an interactive mini-game built for a low-level programming class, extending a real-time CUDA ray tracing engine provided by my professor. The experience takes the user through multiple unique rooms using WASD controls. It begins in an Infinity Mirrors room, inspired by Yayoi Kusama, which uses highly reflective surfaces to create a visually infinite space. The final room features dynamic, floating spheres that collide and bounce off the environment in real-time.",
    "tags": ["CUDA", "C++", "Parallel Programming"],
    "dateCompleted": "2024",
    "projectType": "Individual Project",
    "githubURL": "https://github.com/pongsagon/DDCT_CUDA_Raytrace",
    "gameURL": "https://matt-pongsagon.itch.io/cuda-raytrace-ddct",
    "features": [
      { "name": "Extended the ray tracer to render complex triangle meshes, not just the original spheres.", "isMine": true },
      { "name": "Implemented real-time physics for sphere-to-sphere and sphere-to-triangle-surface collisions.", "isMine": true },
      { "name": "Procedurally generated unique patterns for the surface materials.", "isMine": true },
      { "name": "Created a system for materials and colors to update dynamically based on user interaction.", "isMine": true },
      { "name": "Designed a multi-room experience with WASD navigation.", "isMine": true },
      { "name": "Built a dynamic scene where floating, refractive spheres realistically bounce off surfaces and eachother", "isMine": true }
    ],
    "myFeatures": [],
    "media": {
      "videoURL": "https://www.youtube.com/embed/6XbfCoaFQCI?si=uEWPyFNPpgSCWcGU",
      "images": [
        "assets/cuda1.png",
        "assets/cuda2.png"
      ]
    }
  },
  {
    "id": "area-51",
    "href": "project-template.html?id=area-51",
    "imgSrc": "assets/area51-1.png",
    "imgAlt": "Area51 - They can't stop us all",
    "title": "Area51 - They can't stop us all",
    "year": "2022",
    "description": "A 2D Platformer game developed on Unity for a term project in my first year.",
    "longDescription": "This project was a 2D Platformer game developed for a first-year term project using Unity and C#. The goal was to learn the fundamentals of the Unity engine, including physics, sprite management, and level design. We explored techniques for wave generation and basic rendering.",
    "tags": ["Unity", "C#", "2D Game Development"],
    "dateCompleted": "December 2022",
    "projectType": "Group",
    "githubURL": "https://github.com/Vibhumi-Sermsilp/DT130-SEM1-2022",
    "gameURL": null,
    "features": [
      { "name": "Real-time Fast Fourier Transform (FFT) for wave generation.", "isMine": false },
      { "name": "Screen-Space Reflections (SSR) for water surface.", "isMine": false },
      { "name": "Foam simulation based on wave curvature.", "isMine": false },
      { "name": "Physically-Based Rendering (PBR) material properties.", "isMine": false }
    ],
    "myFeatures": [],
    "media": {
      "videoURL": "https://www.youtube.com/embed/tGzSuIxrd4Y?si=NYrvnHC4g97LRgFZ",
      "images": [
        "assets/area51-1.png",
        "assets/area51-2.png"
      ]
    }
  }
]